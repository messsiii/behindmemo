generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                          String                        @id @default(cuid())
  name                        String?
  email                       String?                       @unique
  emailVerified               DateTime?
  image                       String?
  totalUsage                  Int                           @default(0)
  lastLoginAt                 DateTime                      @default(now())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  isVIP                       Boolean                       @default(false)
  vipExpiresAt                DateTime?
  credits                     Int                           @default(30)
  paddleCustomerId            String?                       @unique
  paddleSubscriptionId        String?                       @unique
  paddleSubscriptionStatus    String?
  accounts                    Account[]
  letter_template_preferences letter_template_preferences[]
  letters                     Letter[]
  sessions                    Session[]
  shared_letters              shared_letters[]
  Subscription                Subscription[]
  templateUnlocks             TemplateUnlock[]
  transactions                Transaction[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  code       String?

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Letter {
  id                          String                        @id @default(cuid())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  content                     String
  imageUrl                    String?
  userId                      String
  prompt                      String
  isPublic                    Boolean                       @default(false)
  likeCount                   Int                           @default(0)
  shareCount                  Int                           @default(0)
  language                    String                        @default("zh")
  metadata                    Json?
  status                      String                        @default("pending")
  error                       String?
  videoUrl                    String?
  letter_template_preferences letter_template_preferences[]
  user                        User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  shared_letters              shared_letters[]

  @@index([userId])
  @@map("letters")
}

model Transaction {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  userId               String
  amount               Float
  currency             String   @default("USD")
  status               String   @default("completed")
  type                 String
  paddleOrderId        String?
  paddleSubscriptionId String?
  pointsAdded          Int?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("transactions")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  paddleSubscriptionId String    @unique
  status               String
  planType             String
  priceId              String
  startedAt            DateTime
  nextBillingAt        DateTime?
  canceledAt           DateTime?
  endedAt              DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  metadata             Json?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("subscriptions")
}

model WebhookEvent {
  id            String    @id @default(cuid())
  paddleEventId String    @unique
  eventType     String
  eventData     Json
  processedAt   DateTime?
  status        String    @default("pending")
  error         String?
  createdAt     DateTime  @default(now())

  @@index([eventType])
  @@map("webhook_events")
}

model Price {
  id           String   @id
  type         String
  name         String
  description  String?
  unitAmount   String
  currency     String
  interval     String?
  creditAmount Int?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  metadata     Json?

  @@map("prices")
}

model TemplateUnlock {
  id         String   @id @default(cuid())
  userId     String
  letterId   String
  templateId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, letterId, templateId])
  @@index([userId])
  @@index([letterId])
  @@map("template_unlocks")
}

model letter_template_preferences {
  id            String   @id
  userId        String
  letterId      String
  templateId    String   @default("classic")
  hideWatermark Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  letters       Letter   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, letterId])
  @@index([letterId])
  @@index([userId])
}

model shared_letters {
  id            String   @id
  letterId      String
  userId        String
  accessToken   String   @unique
  templateStyle String   @default("classic")
  viewCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  hideWatermark Boolean  @default(false)
  letters       Letter   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accessToken])
  @@index([letterId])
  @@index([userId])
}
