// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(2)  // 默认2次生成配额
  totalUsage    Int       @default(0)   // 总使用次数
  lastLoginAt   DateTime  @default(now()) // 最后登录时间
  createdAt     DateTime  @default(now()) // 创建时间
  updatedAt     DateTime  @updatedAt     // 更新时间
  isVIP         Boolean   @default(false) // VIP状态
  vipExpiresAt  DateTime? // VIP过期时间
  accounts      Account[]
  sessions      Session[]
  letters       Letter[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Letter {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  content     String      @db.Text
  imageUrl    String?
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt      String      @db.Text
  isPublic    Boolean     @default(false)
  likeCount   Int         @default(0)
  shareCount  Int         @default(0)
  language    String      @default("zh")
  status      String      @default("pending")
  error       String?     @db.Text
  metadata    Json?

  @@index([userId])
  @@map("letters")
}
