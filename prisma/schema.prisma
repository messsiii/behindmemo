generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String                     @id @default(cuid())
  name                     String?
  email                    String?                    @unique
  emailVerified            DateTime?
  image                    String?
  totalUsage               Int                        @default(0)
  lastLoginAt              DateTime                   @default(now())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isVIP                    Boolean                    @default(false)
  vipExpiresAt             DateTime?
  credits                  Int                        @default(30)
  paddleCustomerId         String?                    @unique
  paddleSubscriptionId     String?                    @unique
  paddleSubscriptionStatus String?
  accounts                 Account[]
  collectionAccesses       CollectionAccess[]
  collectionMessages       CollectionMessage[]
  collections              Collection[]
  imageGenerations         ImageGeneration[]
  templatePreferences      LetterTemplatePreference[]
  letters                  Letter[]
  sessions                 Session[]
  sharedLetters            SharedLetter[]
  Subscription             Subscription[]
  templateUnlocks          TemplateUnlock[]
  transactions             Transaction[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  code       String?

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Letter {
  id                  String                     @id @default(cuid())
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  content             String
  imageUrl            String?
  userId              String
  prompt              String
  isPublic            Boolean                    @default(false)
  likeCount           Int                        @default(0)
  shareCount          Int                        @default(0)
  language            String                     @default("zh")
  metadata            Json?
  status              String                     @default("pending")
  error               String?
  videoUrl            String?
  templatePreferences LetterTemplatePreference[]
  user                User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedLetters       SharedLetter[]

  @@index([userId])
  @@map("letters")
}

model Transaction {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  userId               String
  amount               Float
  currency             String   @default("USD")
  status               String   @default("completed")
  type                 String
  paddleOrderId        String?
  paddleSubscriptionId String?
  pointsAdded          Int?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("transactions")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  paddleSubscriptionId String    @unique
  status               String
  planType             String
  priceId              String
  startedAt            DateTime
  nextBillingAt        DateTime?
  canceledAt           DateTime?
  endedAt              DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  metadata             Json?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("subscriptions")
}

model WebhookEvent {
  id            String    @id @default(cuid())
  paddleEventId String    @unique
  eventType     String
  eventData     Json
  processedAt   DateTime?
  status        String    @default("pending")
  error         String?
  createdAt     DateTime  @default(now())

  @@index([eventType])
  @@map("webhook_events")
}

model Price {
  id           String   @id
  type         String
  name         String
  description  String?
  unitAmount   String
  currency     String
  interval     String?
  creditAmount Int?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  metadata     Json?

  @@map("prices")
}

model TemplateUnlock {
  id         String   @id @default(cuid())
  userId     String
  letterId   String
  templateId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, letterId, templateId])
  @@index([userId])
  @@index([letterId])
  @@map("template_unlocks")
}

model SharedLetter {
  id            String   @id @default(cuid())
  letterId      String
  userId        String
  accessToken   String   @unique
  templateStyle String   @default("classic")
  viewCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hideWatermark Boolean  @default(false)
  letter        Letter   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([letterId])
  @@index([userId])
  @@index([accessToken])
  @@map("shared_letters")
}

model LetterTemplatePreference {
  id            String   @id @default(cuid())
  userId        String
  letterId      String
  templateId    String   @default("classic")
  hideWatermark Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  letter        Letter   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, letterId])
  @@index([userId])
  @@index([letterId])
  @@map("letter_template_preferences")
}

model ImageGeneration {
  id                  String   @id @default(cuid())
  userId              String
  prompt              String
  inputImageUrl       String
  outputImageUrl      String?
  model               String   @default("flux-kontext-pro")
  status              String   @default("pending")
  creditsUsed         Int      @default(10)
  errorMessage        String?
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  localOutputImageUrl String?
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("image_generations")
}

model Collection {
  id        String              @id @default(cuid())
  title     String              @default("未命名收集")
  creatorId String
  mainImage String?
  shareUrl  String              @unique
  isPublic  Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  accesses  CollectionAccess[]
  messages  CollectionMessage[]
  creator   User                @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([shareUrl])
  @@map("collections")
}

model CollectionMessage {
  id           String      @id @default(cuid())
  collectionId String
  userId       String?
  tempUserId   String?
  type         MessageType
  content      String?
  audioUrl     String?
  imageUrl     String?
  duration     Int?
  userAvatar   String?
  userName     String?
  createdAt    DateTime    @default(now())
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tempUser     TempUser?   @relation(fields: [tempUserId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])

  @@index([collectionId])
  @@index([createdAt])
  @@map("collection_messages")
}

model TempUser {
  id                 String              @id @default(cuid())
  browserFingerprint String              @unique
  randomAvatar       String
  randomName         String
  createdAt          DateTime            @default(now())
  lastActiveAt       DateTime            @updatedAt
  accesses           CollectionAccess[]
  messages           CollectionMessage[]

  @@index([browserFingerprint])
  @@map("temp_users")
}

model CollectionAccess {
  id           String     @id @default(cuid())
  collectionId String
  userId       String?
  tempUserId   String?
  accessCount  Int        @default(1)
  lastAccessAt DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tempUser     TempUser?  @relation(fields: [tempUserId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])

  @@unique([collectionId, userId])
  @@unique([collectionId, tempUserId])
  @@index([collectionId])
  @@map("collection_accesses")
}

enum MessageType {
  AUDIO
  IMAGE
  TEXT
}
